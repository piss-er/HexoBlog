<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>加密文章1</title>
    <link href="/2023/07/21/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A01/"/>
    <url>/2023/07/21/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A01/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="87808f22556c9d9d50c40a0d672295c1bc2b727c9c1bb4e503ffd7d5a718285c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>加密</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一篇文章学会Markdown</title>
    <link href="/2023/06/22/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%AD%A6%E4%BC%9AMarkdown/"/>
    <url>/2023/06/22/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%AD%A6%E4%BC%9AMarkdown/</url>
    
    <content type="html"><![CDATA[<h3 id="本文通过先展示效果再展示代码帮助大家快速学会markdown"><a class="markdownIt-Anchor" href="#本文通过先展示效果再展示代码帮助大家快速学会markdown"></a> 本文通过先展示效果再展示代码帮助大家快速学会Markdown</h3><hr /><h3 id="六级标题"><a class="markdownIt-Anchor" href="#六级标题"></a> 六级标题</h3><h1 id="一级"><a class="markdownIt-Anchor" href="#一级"></a> 一级</h1><h2 id="二级"><a class="markdownIt-Anchor" href="#二级"></a> 二级</h2><h3 id="三级"><a class="markdownIt-Anchor" href="#三级"></a> 三级</h3><h4 id="四级"><a class="markdownIt-Anchor" href="#四级"></a> 四级</h4><h5 id="五级"><a class="markdownIt-Anchor" href="#五级"></a> 五级</h5><h6 id="六级"><a class="markdownIt-Anchor" href="#六级"></a> 六级</h6><h2 id="-code0-"><a class="markdownIt-Anchor" href="#-code0-"></a> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-section"># 一级</span><br><span class="hljs-section">## 二级</span><br><span class="hljs-section">### 三级</span><br><span class="hljs-section">#### 四级</span><br><span class="hljs-section">##### 五级</span><br><span class="hljs-section">###### 六级</span><br></code></pre></td></tr></table></figure></h2><h3 id="区块"><a class="markdownIt-Anchor" href="#区块"></a> 区块</h3><blockquote><p>这是一个区块</p><blockquote><p>区块也可嵌套</p></blockquote></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-quote">&gt; 这是一个区块</span><br>&gt;&gt; 区块也可嵌套<br></code></pre></td></tr></table></figure><hr /><h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3><p>有序列表：（数字点后面添加一个空格）</p><ol><li>打开冰箱门</li><li>把大象塞进去</li><li>关上冰箱门</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">1.</span> 打开冰箱门<br><span class="hljs-bullet">2.</span> 把大象塞进去<br><span class="hljs-bullet">3.</span> 关上冰箱门<br></code></pre></td></tr></table></figure><p>无序列表：（* - +号都行，这些标记后面要添加一个空格）</p><ul><li>数学课</li><li>英语课</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">-</span> 数学课<br><span class="hljs-bullet">-</span> 英语课<br></code></pre></td></tr></table></figure><p>嵌套列表：</p><ol><li>第一个需求<ul><li>子需求</li><li>子需求</li></ul></li><li>第二个需求<ol><li>第一步</li><li>第二步</li><li>第三步</li></ol></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-bullet">1.</span> 第一个需求<br><span class="hljs-bullet">    -</span> 子需求<br><span class="hljs-bullet">    -</span> 子需求<br><span class="hljs-bullet">2.</span> 第二个需求<br><span class="hljs-bullet">    1.</span> 第一步<br><span class="hljs-bullet">    2.</span> 第二步<br><span class="hljs-bullet">    3.</span> 第三步<br></code></pre></td></tr></table></figure><hr /><h3 id="段落与字体"><a class="markdownIt-Anchor" href="#段落与字体"></a> 段落与字体</h3><p>直接换行后为同一段内换行，两个空格后换行或者在直接编辑器中空一行表示下一段：</p><p>第一段第一行<br />第一段第二行</p><p>第二段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">第一段第一行<br>第一段第二行<br><br>第二段<br></code></pre></td></tr></table></figure><p><em>斜体文字</em></p><p><strong>粗体文字</strong></p><p><em><strong>粗斜体文字</strong></em></p><p><s>删除线文字</s></p><p><u>下划线文字</u></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-emphasis">*斜体文字*</span>  <br><br><span class="hljs-strong">**粗体文字**</span>  <br><br><span class="hljs-strong">**<span class="hljs-emphasis">*粗斜体文字*</span>**</span>  <br><br>~~删除线文字~~  <br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span></span>下划线文字<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span></span>  <br></code></pre></td></tr></table></figure><p>脚注：（点击脚注会自动跳转到文章末尾释意）<br />今天我们学习鲁迅<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="鲁迅，原名周树人，著名民主战士。"><a href="https://www.baidu.com/">1</a></span></a></sup>文章:《论他妈的》</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">今天我们学习鲁迅<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="鲁迅，原名周树人，著名民主战士。">[1]</span></a></sup>文章:《论他妈的》<br>[<span class="hljs-symbol">^1</span>]: <span class="hljs-link">鲁迅，原名周树人，著名民主战士。 </span><br></code></pre></td></tr></table></figure><p>分割线：<br />三个以上的*号，或者-号，可参考本文其他地方的分割线不再单独展示。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">---<br><span class="hljs-strong">**<span class="hljs-emphasis">*</span></span><br></code></pre></td></tr></table></figure><p>下标：<br />Fe<sub>3</sub>O<sub>4</sub></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">Fe~3~O~4~<br></code></pre></td></tr></table></figure><p>上标：<br />x<sup>2</sup></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">x^2^<br></code></pre></td></tr></table></figure><p>高亮文字：<br /><mark>这是一段高亮文字</mark></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">==这是一段高亮文字==<br></code></pre></td></tr></table></figure><hr /><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><p>两对 “```” 包括（反引号在键盘左上角，横版数字键的左端），可以指定语言，也可以不指定，指定后的语言会根据不同语言的关键词做颜色区分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>```C++<br />int main(){<br />print(“Hello World!”);<br />return 0;<br />}<br />````<br />(此处代码区为显示效果，效果的实现代码如上)</p><p>直接使用制表符tab键，或四个空格，也可以形成代码区</p><p>如果是段落内代码，不单独占用整行区域，可以使用一对反引号括起来，就像这样<code>print()</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="hljs-code">`print()`</span><br></code></pre></td></tr></table></figure><hr /><h3 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h3><p>方括号写站点名，圆括号写链接<br /><a href="https://www.baidu.com/">百度</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">[<span class="hljs-string">百度</span>](<span class="hljs-link">https://www.baidu.com/</span>)<br></code></pre></td></tr></table></figure><p>尖括号可以展示一个可点击的链接<br /><a href="https://www.baidu.com/">https://www.baidu.com/</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml">&lt;https://www.baidu.com/&gt;</span><br></code></pre></td></tr></table></figure><p>如果链接需要多次出现，可以将链接赋值一个变量，随用随取：<br /><a href="https://www.baidu.com/">百度</a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">[<span class="hljs-string">百度</span>][<span class="hljs-symbol">1</span>]<br><br>[<span class="hljs-symbol">1</span>]: <span class="hljs-link">https://www.baidu.com/</span><br></code></pre></td></tr></table></figure><hr /><h3 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h3><p>使用竖线 | 区分不同列；<br />冒号的不同位置区分对齐方式（表格中添加123以防止看不出对齐方式）；<br />短横线至少一个；<br />左右端竖线可以省略。</p><table><thead><tr><th style="text-align:left">第一列</th><th style="text-align:center">第二列</th><th style="text-align:right">第三列</th></tr></thead><tbody><tr><td style="text-align:left">左对齐123</td><td style="text-align:center">居中</td><td style="text-align:right">右对齐123</td></tr></tbody></table><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">|第一列|第二列|第三列|<br>|:---|:---:|---:|<br>|左对齐123|居中|右对齐123|<br></code></pre></td></tr></table></figure><hr /><h3 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h3><p>先写叹号“！”；<br />方括号写图像名字；<br />圆括号写地址，可以是相对地址，也可以是绝对地址；<br />双引号内的文字可以在鼠标悬浮图片上时显示。<br /><img src="https://img.gejiba.com/images/18fe10b3ff7a148d67b7b78a2451bc5d.jpg" alt="头像" /></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">![<span class="hljs-string">头像</span>](<span class="hljs-link">logo.jpg &quot;头像logo&quot;</span>)<br></code></pre></td></tr></table></figure><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用HTML中普通的 img 标签<br /><img src = "https://img.gejiba.com/images/18fe10b3ff7a148d67b7b78a2451bc5d.jpg" width = "200px"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;logo.jpg&quot;</span> <span class="hljs-attr">width</span> = <span class="hljs-string">&quot;200px&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr /><h3 id="数学公式"><a class="markdownIt-Anchor" href="#数学公式"></a> 数学公式</h3><p>行内数学公式：$ \sum_{n=1}^{100} n^ 2$</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">$ \sum<span class="hljs-emphasis">_&#123;n=1&#125;^&#123;100&#125; n^2 $</span><br></code></pre></td></tr></table></figure><p>单独占据整行：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">$$<br>E=mc^2<br>$$<br>//这样排版美观，也可以写在一行内<br></code></pre></td></tr></table></figure><hr /><h3 id="特殊需求"><a class="markdownIt-Anchor" href="#特殊需求"></a> 特殊需求</h3><p>如果你还有其他特殊需求，可以自行搜索使用HTML标签实现，Markdown中支持一些HTML标签，例如上文提到的<code>&lt;u&gt;下划线文字&lt;/u&gt;</code>和<code>&lt;img src = &quot;logo.jpg&quot; width = &quot;200px&quot;&gt;</code>本质为HTML标签</p><hr /><h3 id="其他事项"><a class="markdownIt-Anchor" href="#其他事项"></a> 其他事项</h3><p>本文为了使小白快速上手语言较为通俗，如“段内显示”和“单独占据整行”，实际为HTML中的“行内元素”和“块级元素”，专业人士不喜勿喷。</p><p>也许你已经注意到了，本文同样采用Markdown进行编写，Markdown在写笔记，发表博客，排版方面有巨大优势。</p><p>公众号&quot;一只达瓦里式&quot;回复0720可获取此页面的Markdown格式文件。</p><h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释:</h3><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>鲁迅，原名周树人，著名民主战士。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法(粗略总结,Java实现)</title>
    <link href="/2023/06/22/%E6%8E%92%E5%BA%8F(%E7%B2%97%E7%95%A5%E6%80%BB%E7%BB%93)/"/>
    <url>/2023/06/22/%E6%8E%92%E5%BA%8F(%E7%B2%97%E7%95%A5%E6%80%BB%E7%BB%93)/</url>
    
    <content type="html"><![CDATA[<p><strong>稳定性</strong>：如果相同元素的前后相对位置不变，就说这种排序算法是稳定的</p><h4 id="插入排序"><a class="markdownIt-Anchor" href="#插入排序"></a> 插入排序</h4><ol><li><strong>直接插入排序算法</strong></li></ol><blockquote><p>序列分为两部分，一部分有序，一部分无序，每一趟都从无序的中挑一个插入到有序的序列中，共执行n-1趟<br />每趟拿到的数一点一点交换往前移动，这样的话遇到相同的数就不移动，算法稳定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;keys.length; i++)&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> key[i], j;<br>    <span class="hljs-keyword">for</span>(j=i-<span class="hljs-number">1</span>; j&gt;<span class="hljs-number">0</span> &amp;&amp; x&lt;key[j]; j--)<br>        key[j+<span class="hljs-number">1</span>] = keys[j];<span class="hljs-comment">//j元素后移</span><br>    keys[j+<span class="hljs-number">1</span>] = x;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>正序序列，时间复杂度O(n)；反序序列，时间复杂度O(n<sup>2</sup>)<br />随机排序，等概率情况下为O(n<sup>2</sup>)</p></blockquote><ul><li><p><strong>改进</strong> 增加哨兵位而不是用通过j&gt;0来比较，比较操作在汇编层面更耗时间</p></li><li><p><strong>改进</strong> 可以通过二分查找查看有序的那一部分中应该插入到哪儿</p></li><li><p><strong>稳定性</strong> 稳定</p></li><li><p><strong>时间复杂度</strong> 最好正序O(n)，最坏倒序O(n<sup>2</sup>)</p></li><li><p><strong>空间复杂度</strong>O(1)</p></li></ul><h4 id="希尔排序缩小增量排序"><a class="markdownIt-Anchor" href="#希尔排序缩小增量排序"></a> 希尔排序(缩小增量排序)</h4><blockquote><p><strong>分组</strong>，增量delta=4，那就每隔4个位一组</p></blockquote><table><thead><tr><th style="text-align:center">38</th><th style="text-align:center">55</th><th style="text-align:center">65</th><th style="text-align:center">97</th><th style="text-align:center">27</th><th style="text-align:center">76</th><th style="text-align:center">27*</th><th style="text-align:center">13</th><th style="text-align:center">19</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">i</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">i+4</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">i+4+4</td></tr></tbody></table><blockquote><p>0号和4号和8号比，不符合顺序就交换，1号和5号比较<br />每一组都分别整理好组内的顺序</p></blockquote><blockquote><p>下一次delta=2，整理好<br />下一次delta=1，整理好<br />排序完成</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> delta=key.length/<span class="hljs-number">2</span>; delta&gt;<span class="hljs-number">0</span>; delta/=<span class="hljs-number">2</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=delta; i&lt;key.length; i++)&#123;<span class="hljs-comment">//这里结束叫“一趟”，一趟过后的特点是，分组有序</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> key[i];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i-delta; j&gt;=<span class="hljs-number">0</span> &amp;&amp; x&lt;key[j]; j-=delta)<br>            key[j+delta] = key[j];<span class="hljs-comment">//后移</span><br>        key[j+delta] = x;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>凭啥这种方式能排序更快？<br />这种排序每个元素需要归位的话，他每一次能移动的更多，腿更长，变量能够“大跨步地向这更加正确的方向运动”</p></blockquote><ul><li><strong>稳定性</strong> 算法不稳定， 跨步交换的过程可能会交换两个相同元素的相对位置</li><li><strong>时间复杂度</strong> 比较复杂</li><li><strong>空间复杂度</strong>O(1)</li></ul><h4 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h4><blockquote><p>从前到后，相邻两个比较，不符合顺序就交换，每一趟能归位一个</p></blockquote><blockquote><p>和插入排序的区别<br />插入排序是依次<strong>移动</strong>变量，冒泡是依次<strong>交换</strong>变量<br />插入的前面是排好序的序列，插入的后面是排好序的序列</p></blockquote><ul><li><p><strong>改进</strong> 如果有一趟没有交换，那么就停止算法，序列已经满足顺序，使用一个布尔型变量标记这一趟有没有交换</p></li><li><p><strong>稳定性</strong> 如果相等不交换，那么相对位置不变</p></li><li><p><strong>时间复杂度</strong> 最好O(n)，最坏O(n<sup>2</sup>)</p></li><li><p><strong>空间复杂度</strong>O(1)</p></li></ul><h4 id="快速排序重点"><a class="markdownIt-Anchor" href="#快速排序重点"></a> 快速排序（重点）</h4><blockquote><p>设置基准值，大于基准值的和小于基准值的各分一组，这两组分别找基准值，分组……<br />当一组只有一个就是排序成功</p></blockquote><blockquote><p>怎么分组？<br />通过两个指针前后相对运动来分两组，前后顺序不对就交换</p></blockquote><blockquote><p>切记前后两个指针，一趟过后判断序列的时候，两个指针分别走i先j后，所得序列和原序列完全无关<br /><img src="2022-11-20-22-19-50.png" alt="" /></p></blockquote><ul><li><strong>稳定性</strong> 不稳定，有跨越，可能导致跳过相同的值</li><li><strong>时间复杂度</strong> 最好每一次都分成长度相近的两个子序列O(nlog<sub>2</sub>n)，最坏每一趟都分成差异很大的两个子序列O(n<sup>2</sup>)相当于普通排序</li><li><strong>空间复杂度</strong> O(1)</li></ul><h4 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h4><blockquote><p>每一趟<strong>选择</strong>未被排序的序列中最大的元素放到最后，每趟归位一个<br />n-1趟</p></blockquote><ul><li><strong>稳定性</strong> 不稳定，会跳跃</li><li><strong>时间复杂度</strong> O(n<sup>2</sup>)</li><li><strong>空间复杂度</strong>O(1)</li></ul><h4 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h4><blockquote><p>第一次构建堆麻烦一些，但是构建好之后，取出堆首元素，堆尾元素放到堆首，然后往下滑(不止滑一步)，初次构建时候建议也搞成滑动操作，而不是简单的交换操作，每一个结点都往下滑动</p></blockquote><blockquote><p>完全二叉树，用数组模拟，索引从0开始的话，每一个结点index*2+1就是左孩子结点，array.length/2-1就是第一个非叶子结点</p></blockquote><ul><li><strong>稳定性</strong> 不稳定，会跳跃</li><li><strong>时间复杂度</strong> O(nlog<sub>2</sub>n)</li><li><strong>空间复杂度</strong>O(1)</li></ul><h4 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h4><blockquote><p>基础操作是合并两个已经排序的序列(双指针)<br />两两一组，排序，每两个组合并…，最后只剩下一个组</p></blockquote><ul><li><strong>时间复杂度</strong>一共排序合并log<sub>2</sub>n次，每一次操作次数都是n，时间复杂度为O(nlog<sub>2</sub>n)</li></ul><h4 id="做题总结"><a class="markdownIt-Anchor" href="#做题总结"></a> 做题总结</h4><ul><li><strong>选择排序、冒泡排序、堆排序</strong>，每一趟都能够归位一个，<strong>插入排序</strong>不能归位，只能是一个有序的序列，最小的和最大的都可能开没出现。</li><li>排序趟数和原始排序有关：</li><li><ul><li>插入排序(要通过反复比较选择插入位置)</li></ul></li><li><ul><li>冒泡排序(一次过后没有交换就说明排好了)</li></ul></li><li><ul><li>快速排序(要是很有序的话，每一次全部序列都在一边，没法分成两半)</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java网络编程</title>
    <link href="/2023/06/22/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2023/06/22/Java%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="url类"><a class="markdownIt-Anchor" href="#url类"></a> URL类</h3><ol><li>构造方法</li></ol><blockquote><p>直接输入完整地址<br />协议+域名+资源地址</p></blockquote><ol start="2"><li>获取输入<code>url.openStream()</code>返回一个输入流，尽量放到另一个线程</li></ol><hr /><h3 id="套接字"><a class="markdownIt-Anchor" href="#套接字"></a> 套接字</h3><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">客户端Socket</th><th style="text-align:center">服务器端Socket</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">输入流<code>getInputString()</code></td><td style="text-align:center">输出流<code>getOutputString()</code></td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">输出流<code>getOutputString()</code></td><td style="text-align:center">输入流<code>getInputString()</code></td></tr><tr><td style="text-align:center">构造</td><td style="text-align:center">服务器地址+端口<code>new Socket(String,int)</code></td><td style="text-align:center">ServerSocket对象用来注册端口号<code>new ServerSocket(int)</code> 使用ServerSocket创造Socket对象<code>serverSocket.accept()</code></td></tr><tr><td style="text-align:center">构造解读</td><td style="text-align:center">用地址和端口号构造就会向服务器端发送申请，对方相应端口有程序监听的话就会被接收</td><td style="text-align:center">只要有客户端希望链接就都会被端口监听的程序接收到</td></tr></tbody></table><ul><li><strong>注意</strong> 尽量把输入流读取信息<code>in.readUTF()</code>放在另一个线程中，防止<strong>线程阻塞</strong></li><li>获取到的底层流可以用来<strong>构造数据流</strong>，更加方便读写</li><li>数据流使用方法<code>readUTF()</code>读可以方便一些，也可以构造String对象的时候指定<code>&quot;utf-8&quot;</code></li><li>服务器端先启动，等待客户端请求，服务器端<code>accept()</code>方法也会<strong>阻塞线程</strong></li></ul><h5 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h5><ul><li>端口为0~65535，其中前1024个被占用0~1023</li><li>InetAddress类</li><li><ul><li>用静态方法构造<code>InetAddress.getByName(String s)</code></li></ul></li><li><ul><li>传入域名，toString返回<code>域名/IP</code></li></ul></li><li><ul><li>传入IP，toString返回<code>域名/IP</code>或者<code>/IP</code>，因为IP有多个域名的时候不确定用户希望返回哪一个</li></ul></li><li>客户端多线程使用Thread，这样每一个申请访问的都可以开辟一个线程，且不会互相影响，如果都使用一个Runnable来创建的话会互相影响</li></ul><h3 id="udp数据报"><a class="markdownIt-Anchor" href="#udp数据报"></a> UDP数据报</h3><blockquote><p>UDP数据报传输更快，但不一定保证能够到达目的地主机，也不能数据保证到达目的地的顺序和发出顺序相同，是一种不可靠的协议，用于能忍受微小错误需要更快传输信息的场景</p></blockquote><ul><li><p><strong>发送端</strong></p><ol><li><strong>打包数据</strong></li></ol><ul><li><code>DatagramPacket(byte data[], int length, InetAddress address, int port)</code></li><li>设置偏移量的字节数组<code>DatagramPacket(byte data[], int offset, int length, InetAddress address, int port)</code></li></ul><ol start="2"><li><strong>发送数据包</strong></li></ol><ul><li>无参数构造方法<code>DatagramSocket mail_out = new DatagramSocket()</code></li><li>发送数据包<code>mail_out.send(data_pack)</code></li></ul></li><li><p><strong>接收端</strong></p><ol><li><strong>注册接收端口</strong></li></ol><ul><li><code>DatagramSocket mail_in = new DataSocket(int port)</code></li></ul><ol start="2"><li><strong>接收数据包</strong></li></ol><ul><li><code>DatagramPacket pack = new DatagramPacket(byte data[], int length)</code></li><li><code>mail_in.receive(pack)</code></li></ul></li></ul><p><strong>注意事项</strong></p><ul><li><code>receive()</code>会阻塞线程</li><li>数据包的数据长度最好不要超过8192KB(8MB)</li><li>数据包类的常用方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">getPort()<span class="hljs-comment">//获取发出数据包的远程主机的端口</span><br>getLength()<span class="hljs-comment">//获取数据包的字节长度</span><br>getAddress()<span class="hljs-comment">//获取发出数据包的主机地址</span><br></code></pre></td></tr></table></figure><hr /><h3 id="广播数据报"><a class="markdownIt-Anchor" href="#广播数据报"></a> 广播数据报</h3><blockquote><p>DatagramSocket只允许数据报发送给指定的目标地址，而MulticastSocket可以将数据报以广播方式发送到数量不等的多个客户端。<br />IP协议为多点广播提供了这批特殊的IP地址，这些IP地址的范围是<br /><strong>224.0.0.0~239.255.255.255</strong></p></blockquote><p>关键类：组播套接字类MulticastSocket<br />MulticastSocket socket</p><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">目的</th></tr></thead><tbody><tr><td style="text-align:center"><code>int port = 5858</code></td><td style="text-align:center">int型端口</td></tr><tr><td style="text-align:center"><code>group = InetAddress.getByName(&quot;239.255.8.0&quot;)</code></td><td style="text-align:center">创建group</td></tr><tr><td style="text-align:center"><code>new MulticastSocket(port)</code></td><td style="text-align:center">创建组播套接字实例，设置广播端口</td></tr><tr><td style="text-align:center"><code>socket.setTimeToLive(1)</code></td><td style="text-align:center">设置广播范围为只在本地网络</td></tr><tr><td style="text-align:center"><code>NetworkInterface.getByInetAddress(group)</code></td><td style="text-align:center">构造NetworkInterface实例</td></tr><tr><td style="text-align:center"><code>new InetSocketAddress(group,port)</code></td><td style="text-align:center">构造InetSocketAddress实例</td></tr><tr><td style="text-align:center"><code>socket.joinGroup(socketAddress,networkInterface)</code></td><td style="text-align:center">加入group</td></tr><tr><td style="text-align:center"><code>socket.send(packet)</code></td><td style="text-align:center">发送数据包</td></tr><tr><td style="text-align:center"><code>socket.receive(packet)</code></td><td style="text-align:center">接收数据报包</td></tr></tbody></table><p><img src="https://img.gejiba.com/images/57cb5b035d22ee0563784757333481c1.png" alt="" /></p><p>代码如下，感兴趣的同学课后自取<br /><strong>广播端</strong><br /><strong>BroadCast.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BroadCast</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;国庆放假时间是9月30日&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">5858</span>;<br>    <span class="hljs-type">InetAddress</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">MulticastSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    BroadCast()&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            group = InetAddress.getByName(<span class="hljs-string">&quot;239.255.8.0&quot;</span>);<br>            socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MulticastSocket</span>(port);<br>            socket.setTimeToLive(<span class="hljs-number">1</span>);<br>            <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">socketAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(group,port);<br>            <span class="hljs-type">NetworkInterface</span> <span class="hljs-variable">networkInterface</span> <span class="hljs-operator">=</span> NetworkInterface.getByInetAddress(group);<br>            socket.joinGroup(socketAddress,networkInterface);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;Error:&quot;</span>+e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-type">byte</span> data[] = s.getBytes();<br>                packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, group, port);<br>                System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data));<br>                socket.send(packet);<br>                Thread.sleep(<span class="hljs-number">2000</span>);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                System.out.println(<span class="hljs-string">&quot;Error:&quot;</span>+e);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">BroadCast</span>().play();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接收端</strong><br /><strong>Receiver.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Receiver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> <span class="hljs-number">5858</span>;<br>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">group</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">MulticastSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            group = InetAddress.getByName(<span class="hljs-string">&quot;239.255.8.0&quot;</span>);<br>            socket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MulticastSocket</span>(port);<br>            <span class="hljs-type">InetSocketAddress</span> <span class="hljs-variable">socketAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InetSocketAddress</span>(group,port);<br>            <span class="hljs-type">NetworkInterface</span> <span class="hljs-variable">networkInterface</span> <span class="hljs-operator">=</span> NetworkInterface.getByInetAddress(group);<br>            socket.joinGroup(socketAddress,networkInterface);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;&#125;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">byte</span> data[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8192</span>];<br>            <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, group, port);<br>            <span class="hljs-keyword">try</span> &#123;<br>                socket.receive(packet);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(packet.getData(), <span class="hljs-number">0</span>, packet.getLength());<br>                System.out.println(<span class="hljs-string">&quot;接收的内容：\n&quot;</span>+message);<br>            &#125;<br>            <span class="hljs-keyword">catch</span> (Exception e)&#123;&#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双向链表(华强买瓜)</title>
    <link href="/2023/06/21/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8(%E5%8D%8E%E5%BC%BA%E4%B9%B0%E7%93%9C)/"/>
    <url>/2023/06/21/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8(%E5%8D%8E%E5%BC%BA%E4%B9%B0%E7%93%9C)/</url>
    
    <content type="html"><![CDATA[<h3 id="情景"><a class="markdownIt-Anchor" href="#情景"></a> 情景</h3><hr /><p>有一个人前来<s>找茬</s>买瓜<br /><img src="https://img.gejiba.com/images/40c96daa2a0963cd49d221eec9e2bc63.jpg" alt="" /></p><p>不是，我们今天是瓜摊老板</p><p><img src="https://img.gejiba.com/images/643c4d9104b1c8e5dd8bcc4086f04e96.jpg" alt="" /></p><p>用双向链表来存储整个瓜摊</p><h3 id="创建节点"><a class="markdownIt-Anchor" href="#创建节点"></a> 创建节点</h3><p>首先，我们需要创建节点，这次摆瓜摊，节点就是每一个西瓜</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watermelon</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> location;<br>    <span class="hljs-keyword">public</span> Ripe ripe;<br>    <span class="hljs-keyword">public</span> Watermelon pre;<br>    <span class="hljs-keyword">public</span> Watermelon next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Watermelon</span><span class="hljs-params">(<span class="hljs-type">int</span> location, String isRipe)</span> &#123;<br>        <span class="hljs-built_in">this</span>.location = location;<br>        <span class="hljs-built_in">this</span>.ripe = Ripe.valueOf(isRipe);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Watermelon&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;location=&quot;</span> + location +<br>                <span class="hljs-string">&quot;, ripe=&quot;</span> + ripe +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重写toString方法方便后续输出西瓜信息<br />location是西瓜在瓜摊上占的位置，ripe是枚举类，只能有三种对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Ripe</span>&#123;<br>    熟瓜,<br>    生瓜蛋子,<br>    头结点无瓜;<br>&#125;<br></code></pre></td></tr></table></figure><p>读者不熟悉枚举类的话可以直接用布尔型变量来表示，true表示熟瓜，false表示生瓜，头结点存一个空值null就行</p><h3 id="现在我们正式开始写瓜摊链表"><a class="markdownIt-Anchor" href="#现在我们正式开始写瓜摊链表"></a> 现在我们正式开始写瓜摊(链表)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stall</span>&#123;<br>    <span class="hljs-comment">/*增：摆西瓜</span><br><span class="hljs-comment">    * 插入：按编号插入</span><br><span class="hljs-comment">    * 删：卖西瓜</span><br><span class="hljs-comment">    * 改：偷换一个西瓜</span><br><span class="hljs-comment">    * 查：查看成熟程度</span><br><span class="hljs-comment">    * */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们的通过实际情况来练习双向链表增删改查</p><p>定义好头结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">Watermelon</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;头结点无瓜&quot;</span>);<br></code></pre></td></tr></table></figure><hr /><p>在结尾位置添加一个西瓜，也是通过遍历来实现，遍历到最后一个位置，再添加新的瓜，新的瓜的pre指向最后一个瓜，最后一个瓜的next指向新的瓜</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">(Watermelon newWatermelon)</span>&#123;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">break</span>;<br>        temp = temp.next;<br>    &#125;<br>    newWatermelon.pre = temp;<br>    temp.next = newWatermelon;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><p>在中间空位置插入瓜</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addByOrder</span><span class="hljs-params">(Watermelon newWatermelon)</span>&#123;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">ifExist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp.location == newWatermelon.location)<span class="hljs-comment">//这个位置已经有瓜占了</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (temp.location &gt; newWatermelon.location)&#123;<span class="hljs-comment">//找到了合适位置的后一个</span><br>            ifExist = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ifExist)&#123;<br>        newWatermelon.pre = temp.pre;<br>        temp.pre.next = newWatermelon;<br>        temp.pre = newWatermelon;<br>        newWatermelon.next = temp;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这个位置已经有瓜啦&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><p>一眼看出是个不懂瓜的人或者懂瓜的人，随机应变改变显眼位置的瓜</p><p><img src="https://img.gejiba.com/images/7ddc434aa7b800e22e869c4f28d10ddc.jpg" alt="" /></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exchange</span> <span class="hljs-params">(Watermelon newWatermelon)</span>&#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;今天的瓜已经卖完了&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">ifExist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//标记一下，该位置有没有瓜，有瓜再换，没瓜也不用换</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (temp.location == newWatermelon.location)&#123;<br>            ifExist = <span class="hljs-literal">true</span>;<span class="hljs-comment">//该位置存在瓜</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ifExist)&#123;<br>        temp.pre.next = newWatermelon;<br>        temp.next.pre = newWatermelon;<br>        newWatermelon.pre = temp.pre;<br>        newWatermelon.next = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;该位置本来就没有瓜，不用换&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><p>对面的人凶神恶煞还拿着刀，可以拿走不熟的生瓜蛋子，防止被捅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">takeAway</span><span class="hljs-params">(<span class="hljs-type">int</span> location)</span>&#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;今天的瓜已经卖完了&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">ifExist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//标记一下，假如该位置没有瓜，本来就不用拿走</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>)<span class="hljs-comment">//没找到位置</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (temp.location == location)&#123;<br>            ifExist = <span class="hljs-literal">true</span>;<span class="hljs-comment">//该位置存在瓜</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ifExist)&#123;<br>        temp.pre.next = temp.next;<br>        temp.next.pre = temp.pre;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;该位置本来就没有瓜，不用拿走&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><p>查看瓜摊情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;今天的瓜已经卖完了&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">break</span>;<br>        System.out.println(temp);<br>        temp = temp.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><h3 id="写个主类"><a class="markdownIt-Anchor" href="#写个主类"></a> 写个主类</h3><p>好，现在瓜摊的几个功能写完了，只需要随便写个主类，加几个功能就可以啦~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleLinkedList</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;摆一个地摊&quot;</span>);<br>        <span class="hljs-type">Stall</span> <span class="hljs-variable">stall</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stall</span>();<br>        System.out.println(<span class="hljs-string">&quot;放几个西瓜，趁人不注意，塞俩生瓜蛋子&quot;</span>);<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;生瓜蛋子&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;生瓜蛋子&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">function</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">stop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        System.out.println(<span class="hljs-string">&quot;0：收摊\n&quot;</span> +<br>                <span class="hljs-string">&quot;1：末尾摆一个瓜\n&quot;</span> +<br>                <span class="hljs-string">&quot;2：中间位置插入一个瓜\n&quot;</span> +<br>                <span class="hljs-string">&quot;3：来了个新手，换上一个生瓜蛋子\n&quot;</span> +<br>                <span class="hljs-string">&quot;4：来了个找茬儿的，拿走一个生瓜蛋子\n&quot;</span> +<br>                <span class="hljs-string">&quot;5：查看瓜摊情况&quot;</span>);<br>        <span class="hljs-keyword">while</span>(stop)&#123;<br>            <span class="hljs-keyword">switch</span>(function.nextInt())&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    stop = <span class="hljs-literal">false</span>;<br>                    System.out.println(<span class="hljs-string">&quot;收摊走人~&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入瓜的位置和成熟程度&quot;</span>);<br>                    stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(scanner.nextInt(),scanner.next()));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入瓜的位置和成熟程度&quot;</span>);<br>                    stall.addByOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(scanner.nextInt(),scanner.next()));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入瓜的位置和成熟程度&quot;</span>);<br>                    stall.exchange(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(scanner.nextInt(),scanner.next()));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入瓜的位置和成熟程度&quot;</span>);<br>                    stall.takeAway(scanner.nextInt());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    stall.show();<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr /><blockquote><p>读者看完可以自行编写实现功能或者在公众号获取完整源码，尝试做一天瓜摊老板吧~<br><br />微信公众号“一只达瓦里氏”后台回复0816获取完整源码</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>性别矛盾</title>
    <link href="/2023/06/21/%E6%80%A7%E5%88%AB%E7%9F%9B%E7%9B%BE/"/>
    <url>/2023/06/21/%E6%80%A7%E5%88%AB%E7%9F%9B%E7%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.gejiba.com/images/65f8a7ddb18567c926af3c93c3da34a1.png" alt="" /><br /><img src="https://img.gejiba.com/images/4cd09c067cce6180701ad5d86484e669.png" alt="" /><br /><img src="https://img.gejiba.com/images/3f745f8f53696758da445d732e299888.png" alt="" /><br />综合思维导图如下, 可以尝试右键保存图片本地观看<br /><img src="https://img.gejiba.com/images/3c37c7b9a285747a1ad33bb8759f6159.png" alt="综合思维导图" /></p>]]></content>
    
    
    <categories>
      
      <category>左翼思想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>马克思主义</tag>
      
      <tag>阶级矛盾</tag>
      
      <tag>性别矛盾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个工人读史的困惑</title>
    <link href="/2023/06/21/%E4%B8%80%E4%B8%AA%E5%B7%A5%E4%BA%BA%E8%AF%BB%E5%8F%B2%E7%9A%84%E5%9B%B0%E6%83%91/"/>
    <url>/2023/06/21/%E4%B8%80%E4%B8%AA%E5%B7%A5%E4%BA%BA%E8%AF%BB%E5%8F%B2%E7%9A%84%E5%9B%B0%E6%83%91/</url>
    
    <content type="html"><![CDATA[<p>《一个工人读史的困惑》<br />(贝托尔特·布莱希特。翻译版本较多，这里只选取一种)</p><blockquote><p>那七个城门的底比斯是谁建造的？<br />书本上列了一些国王的名字。<br><br />石头和砖块是国王搬的吗？<br><br />还有巴比伦，一再被摧毁<br><br />是谁又一再将她重建？<br><br />金光闪闪的利马的建筑工人，<br><br />他们住的房子在什么地方？<br><br />砌了一天的城墙，<br><br />天黑之后，<br><br />万里长城的泥水匠在哪里过夜？<br><br />雄伟的罗马到处都有凯旋门。<br><br />那是谁打造的？<br><br />那些罗马皇帝战胜的又是谁？<br><br />大名鼎鼎的拜占庭<br><br />它的居民都住在宫殿吗？<br><br />传说中的亚特兰提斯，<br><br />大海先淹没奴隶，<br><br />然后那些主子才漂浮在黑夜的汪洋中哀嚎。<br><br />年轻的亚历山大征服了印度。<br><br />就凭他一人吗？<br><br />西泽打败了高卢人，<br><br />他该不会连个煮饭的都没带吧？<br><br />无敌舰队沉没的时候，<br><br />西班牙的腓力哭了。<br><br />没有别的人哭吗？<br><br />腓特烈大帝在七年战争中获胜。<br><br />除了他还有谁获胜？<br><br />页页有胜利。<br><br />谁来准备庆功宴？<br><br />代代出伟人。<br><br />谁来买单？<br><br />一大堆史实。<br><br />一大堆疑问。<br></p></blockquote><hr /><blockquote><p>《防暑降温措施管理办法》安监总安健[2012]89号第八条<br><br />在高温天气期间，用人单位应当按照下列规定，根据生产特点和具体条件，采取合理安排工作时间、轮换作业、适当增加高温工作环境下劳动者的休息时间和减轻劳动强度、减少高温时段室外作业等措施：<br><br />（一）用人单位应当根据地市级以上气象主管部门所属气象台当日发布的预报气温，调整作业时间，但因人身财产安全和公众利益需要紧急处理的除外：<br><br />1、日最高气温达到40℃以上，应当停止当日室外露天作业；<br><br />2、日最高气温达到37℃以上、40℃以下时，用人单位全天安排劳动者室外露天作业时间累计不得超过6小时，连续作业时间不得超过国家规定，且在气温最高时段3小时内不得安排室外露天作业<br><br />3、日最高气温达到35℃以上、37℃以下时，用人单位应当采取换班轮休等方式，缩短劳动者连续作业时间，并且不得安排室外露天作业劳动者加班。<br><br />（二）在高温天气来临之前，用人单位应当对高温天气作业的劳动者进行健康检查，对患有心、肺、脑血管性疾病、肺结核、中枢神经系统疾病及其他身体状况不适合高温作业环境的劳动者，应当调整作业岗位。职业健康检查费用由用人单位承担。<br><br />（三）用人单位不得安排怀孕女职工和未成年工在35℃以上的高温天气期间从事室外露天作业及温度在33℃以上的工作场所作业。<br><br />（四）因高温天气停止工作、缩短工作时间的，用人单位不得扣除或降低劳动者工资。<br><br />用人单位安排劳动者在35℃以上高温天气从事室外露天作业以及不能采取有效措施将工作场所温度降低到33℃以下的，应当向劳动者发放高温津贴，并纳入工资总额。<br></p></blockquote><hr /><blockquote><p>农兵工这么辛苦，想必都在城市有一套房子吧</p></blockquote><iframe src="//player.bilibili.com/player.html?aid=634733432&bvid=BV16b4y1i7mi&cid=460501584&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="650" height="500"> </iframe>]]></content>
    
    
    <categories>
      
      <category>左翼思想</category>
      
    </categories>
    
    
    <tags>
      
      <tag>马克思主义</tag>
      
      <tag>人民史观</tag>
      
      <tag>阶级矛盾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL忘密码了怎么办</title>
    <link href="/2023/06/21/MySQL%E5%BF%98%E5%AF%86%E7%A0%81%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <url>/2023/06/21/MySQL%E5%BF%98%E5%AF%86%E7%A0%81%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    
    <content type="html"><![CDATA[<p><a href="http://t.csdn.cn/mFZZj">教程原文</a></p><ol><li><p>管理员模式打开cmd，如果还开着mysql服务那先关掉<code>net stop mysql</code><br />用如下命令打开越权模式<br /><code>mysqld --console --skip-grant-tables --shared-memory</code><br />这样可以越权模式打开mysql，保留这个黑窗口<br /><img src="https://img.gejiba.com/images/3267fbb2193cabd2d0f97388665052c5.png" alt="" /></p></li><li><p>用管理员身份打开一个cmd<br /><code>mysql -u root -p</code><br />让输入密码时无需输入直接回车就可以进入root用户<br />（上一步没有关闭mysql服务这一步就会失败）</p></li><li><p>刷新权限，不然不允许改密码<br /><code>flush privileges;</code></p></li><li><p>改密码为123<br /><code>alter user 'root'@'localhost' identified by '123';</code></p></li><li><p>再刷新一下权限就可以了<br /><code>flush privileges;</code><br /><img src="https://img.gejiba.com/images/d30c87e2c9bb2d6ca0eb22fb855ad4df.png" alt="" /></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMP详解</title>
    <link href="/2023/06/12/KMP/"/>
    <url>/2023/06/12/KMP/</url>
    
    <content type="html"><![CDATA[<p><a href="https://img.gejiba.com/image/EegrG8"><img src="https://img.gejiba.com/images/40bc3cb7697a13d587b80e33feb3dcc9.png" alt="40bc3cb7697a13d587b80e33feb3dcc9.png" /></a></p><blockquote><p>KMP的本质是通过已经掌握的而信息来规避重复的运算</p></blockquote><blockquote><p>只需要一次主串的遍历就可以完成匹配，next数组的存在让j的回溯不需要循环，而是提前准备好表备查，这样没有循环的嵌套，复杂度仅为O(n)</p></blockquote><table><thead><tr><th style="text-align:center">pattern</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th></tr></thead><tbody><tr><td style="text-align:center">j</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">next</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr></tbody></table><p>可以看出来，next数组存的是如果该位置匹配失败那么该跳到哪里，j=4如果匹配失败了，那么此时前后缀长度为1，应该回溯到j=1。这样的话，我们构建next数组的时候只需要把当前位置产生的前后缀信息放到下一个位置便可以了，也就是说，最后一个位置的前后缀信息是不用比较的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(String target, String pattern)</span>&#123;<br>    <span class="hljs-keyword">return</span> indexOf(target, pattern, <span class="hljs-number">0</span>);<span class="hljs-comment">//下一个写的是从固定位置开始比较，不写位置的话默认从0位置开始比较</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(String target, String pattern, <span class="hljs-type">int</span> begin)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> target.length(), m = pattern.length();<br>    <span class="hljs-keyword">if</span>(begin&lt;<span class="hljs-number">0</span>)<br>        begin = <span class="hljs-number">0</span>;<span class="hljs-comment">//begin容错</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span> || n&lt;m || begin&gt;=n)<span class="hljs-comment">//目标串长度为0，目标串小与模式串，开始比较的位置bigin就已经越界，均不符合要求</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    next = getNext(pattern);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> begin,j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;n &amp;&amp; j&lt;m)&#123;<br>        <span class="hljs-comment">//循环条件：i比到n，j比到m</span><br>        <span class="hljs-keyword">if</span>(j==-<span class="hljs-number">1</span> || target.charAt(i)==pattern.charAt(j))&#123;<br>            <span class="hljs-comment">//比对成功可以让指针加1</span><br>            <span class="hljs-comment">//也可能j是被回溯，然后再来比较，并且有可能直接被回溯为-1，如果回溯为-1，说明没有可以利用的子串信息，直接比下一对就行，所以也需要两指针+1</span><br>            <span class="hljs-comment">//回溯到-1和0是不一样的，0还需要比较一下i和j=0两位置的字符，失败的那个位置没有可以用的子串信息，只能和第0号字符比较了，但是如果回溯到了-1，说明，第0号元素也不用比较了，这一次的匹配失败已经证明了和第0个肯定不相同，直接回溯到-1，就能在下一次循环中让两个指针+1，不用浪费一次比较</span><br>            i++;<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            j = next[j];<span class="hljs-comment">//匹配字符失败，j回溯</span><br>            <span class="hljs-keyword">if</span>(n-i+<span class="hljs-number">1</span>&lt;m-j+<span class="hljs-number">1</span>)<span class="hljs-comment">//如果目标串长度还没子串长，那就不用比了</span><br>                <span class="hljs-keyword">break</span>;<br>            <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j==m?i-m:-<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建next</p><blockquote><ol><li>k前缀长度一定是依次增加，不能跳</li><li>pattern[k] != pattern[j]的时候前缀需要缩短，怎么缩短？k回溯一次</li><li>课本的这个版本next数组情况稍有不同，j位置的next值存的是以j-1为尾的后缀的长度，所以前缀指针匹配失败的时候，直接找next[k]就能找到k-1位置字符上一次出现的位置，回溯略微方便一点</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getNext(String pattern)&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, k = -<span class="hljs-number">1</span>;<span class="hljs-comment">//双指针，同时k也表示当前的前后缀长度</span><br>    <span class="hljs-type">int</span> next[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[pattern.length()];<br>    next[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(j&lt;pattern.length()-<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//构建的时候上一个位置的前后缀长度写在下一个位置的next上，所以只需要比较到倒数第二个，最后一个next也能写上</span><br>    <span class="hljs-keyword">if</span>(k==-<span class="hljs-number">1</span> || pattern.chatAt(j)==pattern.charAt(k))&#123;<span class="hljs-comment">//k==-1表示是第一个，先加一下，如果两个指针的位置匹配成功也可以加一下</span><br>        j++;<br>        k++;<span class="hljs-comment">//匹配成功那么前后缀长度加1</span><br>        next[j] = k;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//没有匹配成功，那么需要找上一个和k-1位置相同的字符，不对一下能不能和j位置匹配成功，那么上一个和k-1字符相同的在哪呢？在next[k]</span><br>        k = next[k];<br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进next数组<br />通过例子来看为什么需要改进</p><table><thead><tr><th style="text-align:center">target</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th></tr></thead><tbody><tr><td style="text-align:center">pattern</td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center">a</td><td style="text-align:center">b</td><td style="text-align:center">c</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">next</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>那么从上述例子来看的话，由于target串中的b对比失败，需要将指针j回溯到j=2，但是很明显如果j=5没有匹配上的话，j=2也匹配不上，因为j=5和j=2两个位置的字符一样！</p><p>所以，next数组还能进行改进，使得时间复杂度进一步下降</p><table><thead><tr><th style="text-align:center">pattern</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th></tr></thead><tbody><tr><td style="text-align:center">前后缀长度k(第一版next)</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">改进后的next</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr></tbody></table><blockquote><p>这里的-1怎么理解？<br />回溯到-1和0是不一样的，0还需要比较一下i和j=0两位置的字符，失败的那个位置没有可以用的子串信息，只能和第0号字符比较了，但是如果回溯到了-1，说明，第0号元素也不用比较了，这一次的匹配失败已经证明了和第0个肯定不相同，直接回溯到-1，就能在下一次循环中让两个指针+1，不用浪费一次比较</p></blockquote><p>总结一下怎么个改进思想：回溯j的时候，我们回溯到的位置是可利用子串的后一个位置，但是如果这个位置和匹配失败的位置的字符一样的话，那其实一定匹配不上，可以利用旧next表回溯的位置的next值接着缩短前后缀，因为那个位置的next值是匹配不上的时候用的，如果我们提前知道匹配不上那其实也就可以提前用这个信息，一直循环缩短到和j位置不一样为止，这样和j位置不一样的话起码还有得比，不然回溯位置一样的话根本不用比</p><p>一句话，<strong>回溯一定要回溯到不一样的字符</strong>，要是回溯位置和原来一样，那一定匹配失败，还得回溯，不如我们在next数组里就把这一步工作做了，减少indexOf()函数里while的工作量</p><p><strong>改进就是避免跳转之后相同</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getNext(String pattern)&#123;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>, k=-<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>(pattern.lenght());<br>    <span class="hljs-keyword">while</span>(j&lt;pattern.length-<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==-<span class="hljs-number">1</span> || pattern.charAt(j)==pattern.chatAt(k))&#123;<br>            j++;<br>            k++;<br>            <span class="hljs-keyword">if</span>(pattern.chatAt(j==pattern.charAt(k)))<br>                next[j] = next[k];<span class="hljs-comment">//用k处的next值复制给j处(缩短前缀)</span><br>                <span class="hljs-comment">//这里有个问题，那要改进版的next需要连续缩短两次或者更多呢呢？</span><br>            <span class="hljs-keyword">else</span><br>                next[j] = k;<span class="hljs-comment">//一直到不相等的时候才能用指针赋值</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            k = next[k];<span class="hljs-comment">//前缀缩短</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果改进版的next需要连续缩短前缀两次或者更多呢呢？<br />如果需要连续缩短，那么中间那个位置的它当年也是想这么想的，所以它存的就是匹配失败时需要跳转的位置，见下方例子</p></blockquote><table><thead><tr><th style="text-align:center">pattern</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">d</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th><th style="text-align:center">a</th><th style="text-align:center">a</th></tr></thead><tbody><tr><td style="text-align:center">索引</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td style="text-align:center">9</td><td style="text-align:center">10</td><td style="text-align:center">11</td><td style="text-align:center">12</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">第一代next</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">3</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">改进版next</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">-1</td><td style="text-align:center">0</td><td style="text-align:center">5</td><td style="text-align:center">-1</td><td style="text-align:center">4</td></tr></tbody></table><blockquote><p>这个例子中，计算改进版next时，9号元素a如果匹配失败需要返回3，但是3号元素也是a，所以此时需要k = next[k]，next[k]是-1而不是0，所以连续缩短前缀并不需要循环，一次就能到位</p></blockquote><p>可以看到改进版的next数组各个数字并不连续</p>]]></content>
    
    
    <categories>
      
      <category>技术笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>算法</tag>
      
      <tag>字符串匹配</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/12/hello-world/"/>
    <url>/2023/06/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
