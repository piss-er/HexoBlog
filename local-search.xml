<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/06/12/KMP/"/>
    <url>/2023/06/12/KMP/</url>
    
    <content type="html"><![CDATA[<p><a href="https://img.gejiba.com/image/EegrG8"><img src="https://img.gejiba.com/images/40bc3cb7697a13d587b80e33feb3dcc9.png" alt="40bc3cb7697a13d587b80e33feb3dcc9.png"></a></p><blockquote><p>KMP的本质是通过已经掌握的而信息来规避重复的运算</p></blockquote><blockquote><p>只需要一次主串的遍历就可以完成匹配，next数组的存在让j的回溯不需要循环，而是提前准备好表备查，这样没有循环的嵌套，复杂度仅为O(n)</p></blockquote><table><thead><tr><th align="center">pattern</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">c</th></tr></thead><tbody><tr><td align="center">j</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr><tr><td align="center">next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td></tr></tbody></table><p>可以看出来，next数组存的是如果该位置匹配失败那么该跳到哪里，j&#x3D;4如果匹配失败了，那么此时前后缀长度为1，应该回溯到j&#x3D;1。这样的话，我们构建next数组的时候只需要把当前位置产生的前后缀信息放到下一个位置便可以了，也就是说，最后一个位置的前后缀信息是不用比较的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(String target, String pattern)</span>&#123;<br>    <span class="hljs-keyword">return</span> indexOf(target, pattern, <span class="hljs-number">0</span>);<span class="hljs-comment">//下一个写的是从固定位置开始比较，不写位置的话默认从0位置开始比较</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(String target, String pattern, <span class="hljs-type">int</span> begin)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> target.length(), m = pattern.length();<br>    <span class="hljs-keyword">if</span>(begin&lt;<span class="hljs-number">0</span>)<br>        begin = <span class="hljs-number">0</span>;<span class="hljs-comment">//begin容错</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span> || n&lt;m || begin&gt;=n)<span class="hljs-comment">//目标串长度为0，目标串小与模式串，开始比较的位置bigin就已经越界，均不符合要求</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    next = getNext(pattern);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> begin,j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;n &amp;&amp; j&lt;m)&#123;<br>        <span class="hljs-comment">//循环条件：i比到n，j比到m</span><br>        <span class="hljs-keyword">if</span>(j==-<span class="hljs-number">1</span> || target.charAt(i)==pattern.charAt(j))&#123;<br>            <span class="hljs-comment">//比对成功可以让指针加1</span><br>            <span class="hljs-comment">//也可能j是被回溯，然后再来比较，并且有可能直接被回溯为-1，如果回溯为-1，说明没有可以利用的子串信息，直接比下一对就行，所以也需要两指针+1</span><br>            <span class="hljs-comment">//回溯到-1和0是不一样的，0还需要比较一下i和j=0两位置的字符，失败的那个位置没有可以用的子串信息，只能和第0号字符比较了，但是如果回溯到了-1，说明，第0号元素也不用比较了，这一次的匹配失败已经证明了和第0个肯定不相同，直接回溯到-1，就能在下一次循环中让两个指针+1，不用浪费一次比较</span><br>            i++;<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            j = next[j];<span class="hljs-comment">//匹配字符失败，j回溯</span><br>            <span class="hljs-keyword">if</span>(n-i+<span class="hljs-number">1</span>&lt;m-j+<span class="hljs-number">1</span>)<span class="hljs-comment">//如果目标串长度还没子串长，那就不用比了</span><br>                <span class="hljs-keyword">break</span>;<br>            <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j==m?i-m:-<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建next</p><blockquote><ol><li>k前缀长度一定是依次增加，不能跳</li><li>pattern[k] !&#x3D; pattern[j]的时候前缀需要缩短，怎么缩短？k回溯一次</li><li>课本的这个版本next数组情况稍有不同，j位置的next值存的是以j-1为尾的后缀的长度，所以前缀指针匹配失败的时候，直接找next[k]就能找到k-1位置字符上一次出现的位置，回溯略微方便一点</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getNext(String pattern)&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, k = -<span class="hljs-number">1</span>;<span class="hljs-comment">//双指针，同时k也表示当前的前后缀长度</span><br>    <span class="hljs-type">int</span> next[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[pattern.length()];<br>    next[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(j&lt;pattern.length()-<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//构建的时候上一个位置的前后缀长度写在下一个位置的next上，所以只需要比较到倒数第二个，最后一个next也能写上</span><br>    <span class="hljs-keyword">if</span>(k==-<span class="hljs-number">1</span> || pattern.chatAt(j)==pattern.charAt(k))&#123;<span class="hljs-comment">//k==-1表示是第一个，先加一下，如果两个指针的位置匹配成功也可以加一下</span><br>        j++;<br>        k++;<span class="hljs-comment">//匹配成功那么前后缀长度加1</span><br>        next[j] = k;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//没有匹配成功，那么需要找上一个和k-1位置相同的字符，不对一下能不能和j位置匹配成功，那么上一个和k-1字符相同的在哪呢？在next[k]</span><br>        k = next[k];<br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进next数组<br>通过例子来看为什么需要改进</p><table><thead><tr><th align="center">target</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">b</th><th align="center">a</th><th align="center">b</th><th align="center">c</th></tr></thead><tbody><tr><td align="center">pattern</td><td align="center">a</td><td align="center">b</td><td align="center">c</td><td align="center">a</td><td align="center">b</td><td align="center">c</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">那么从上述例子来看的话，由于target串中的b对比失败，需要将指针j回溯到j&#x3D;2，但是很明显如果j&#x3D;5没有匹配上的话，j&#x3D;2也匹配不上，因为j&#x3D;5和j&#x3D;2两个位置的字符一样！</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>所以，next数组还能进行改进，使得时间复杂度进一步下降</p><table><thead><tr><th align="center">pattern</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">c</th></tr></thead><tbody><tr><td align="center">前后缀长度k(第一版next)</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td></tr><tr><td align="center">改进后的next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><blockquote><p>这里的-1怎么理解？<br>回溯到-1和0是不一样的，0还需要比较一下i和j&#x3D;0两位置的字符，失败的那个位置没有可以用的子串信息，只能和第0号字符比较了，但是如果回溯到了-1，说明，第0号元素也不用比较了，这一次的匹配失败已经证明了和第0个肯定不相同，直接回溯到-1，就能在下一次循环中让两个指针+1，不用浪费一次比较</p></blockquote><p>总结一下怎么个改进思想：回溯j的时候，我们回溯到的位置是可利用子串的后一个位置，但是如果这个位置和匹配失败的位置的字符一样的话，那其实一定匹配不上，可以利用旧next表回溯的位置的next值接着缩短前后缀，因为那个位置的next值是匹配不上的时候用的，如果我们提前知道匹配不上那其实也就可以提前用这个信息，一直循环缩短到和j位置不一样为止，这样和j位置不一样的话起码还有得比，不然回溯位置一样的话根本不用比</p><p>一句话，<strong>回溯一定要回溯到不一样的字符</strong>，要是回溯位置和原来一样，那一定匹配失败，还得回溯，不如我们在next数组里就把这一步工作做了，减少indexOf()函数里while的工作量</p><p><strong>改进就是避免跳转之后相同</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getNext(String pattern)&#123;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>, k=-<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>(pattern.lenght());<br>    <span class="hljs-keyword">while</span>(j&lt;pattern.length-<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==-<span class="hljs-number">1</span> || pattern.charAt(j)==pattern.chatAt(k))&#123;<br>            j++;<br>            k++;<br>            <span class="hljs-keyword">if</span>(pattern.chatAt(j==pattern.charAt(k)))<br>                next[j] = next[k];<span class="hljs-comment">//用k处的next值复制给j处(缩短前缀)</span><br>                <span class="hljs-comment">//这里有个问题，那要改进版的next需要连续缩短两次或者更多呢呢？</span><br>            <span class="hljs-keyword">else</span><br>                next[j] = k;<span class="hljs-comment">//一直到不相等的时候才能用指针赋值</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            k = next[k];<span class="hljs-comment">//前缀缩短</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果改进版的next需要连续缩短前缀两次或者更多呢呢？<br>如果需要连续缩短，那么中间那个位置的它当年也是想这么想的，所以它存的就是匹配失败时需要跳转的位置，见下方例子</p></blockquote><table><thead><tr><th align="center">pattern</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">d</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">a</th></tr></thead><tbody><tr><td align="center">索引</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td align="center">13</td></tr><tr><td align="center">第一代next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center">改进版next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">2</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">5</td><td align="center">-1</td><td align="center">4</td></tr></tbody></table><blockquote><p>这个例子中，计算改进版next时，9号元素a如果匹配失败需要返回3，但是3号元素也是a，所以此时需要k &#x3D; next[k]，next[k]是-1而不是0，所以连续缩短前缀并不需要循环，一次就能到位</p></blockquote><p>可以看到改进版的next数组各个数字并不连续</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/12/hello-world/"/>
    <url>/2023/06/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
