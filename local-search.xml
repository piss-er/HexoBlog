<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>双向链表(华强买瓜)</title>
    <link href="/2023/06/21/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8(%E5%8D%8E%E5%BC%BA%E4%B9%B0%E7%93%9C)/"/>
    <url>/2023/06/21/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8(%E5%8D%8E%E5%BC%BA%E4%B9%B0%E7%93%9C)/</url>
    
    <content type="html"><![CDATA[<h3 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h3><hr><p>有一个人前来<del>找茬</del>买瓜<br><img src="https://img.gejiba.com/images/40c96daa2a0963cd49d221eec9e2bc63.jpg"></p><p>不是，我们今天是瓜摊老板</p><p><img src="https://img.gejiba.com/images/643c4d9104b1c8e5dd8bcc4086f04e96.jpg"></p><p>用双向链表来存储整个瓜摊</p><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>首先，我们需要创建节点，这次摆瓜摊，节点就是每一个西瓜</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Watermelon</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> location;<br>    <span class="hljs-keyword">public</span> Ripe ripe;<br>    <span class="hljs-keyword">public</span> Watermelon pre;<br>    <span class="hljs-keyword">public</span> Watermelon next;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Watermelon</span><span class="hljs-params">(<span class="hljs-type">int</span> location, String isRipe)</span> &#123;<br>        <span class="hljs-built_in">this</span>.location = location;<br>        <span class="hljs-built_in">this</span>.ripe = Ripe.valueOf(isRipe);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Watermelon&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;location=&quot;</span> + location +<br>                <span class="hljs-string">&quot;, ripe=&quot;</span> + ripe +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重写toString方法方便后续输出西瓜信息<br>location是西瓜在瓜摊上占的位置，ripe是枚举类，只能有三种对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Ripe</span>&#123;<br>    熟瓜,<br>    生瓜蛋子,<br>    头结点无瓜;<br>&#125;<br></code></pre></td></tr></table></figure><p>读者不熟悉枚举类的话可以直接用布尔型变量来表示，true表示熟瓜，false表示生瓜，头结点存一个空值null就行</p><h3 id="现在我们正式开始写瓜摊-链表"><a href="#现在我们正式开始写瓜摊-链表" class="headerlink" title="现在我们正式开始写瓜摊(链表)"></a>现在我们正式开始写瓜摊(链表)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stall</span>&#123;<br>    <span class="hljs-comment">/*增：摆西瓜</span><br><span class="hljs-comment">    * 插入：按编号插入</span><br><span class="hljs-comment">    * 删：卖西瓜</span><br><span class="hljs-comment">    * 改：偷换一个西瓜</span><br><span class="hljs-comment">    * 查：查看成熟程度</span><br><span class="hljs-comment">    * */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>我们的通过实际情况来练习双向链表增删改查<br>定义好头结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">Watermelon</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;头结点无瓜&quot;</span>);<br></code></pre></td></tr></table></figure><hr><p>在结尾位置添加一个西瓜，也是通过遍历来实现，遍历到最后一个位置，再添加新的瓜，新的瓜的pre指向最后一个瓜，最后一个瓜的next指向新的瓜</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span> <span class="hljs-params">(Watermelon newWatermelon)</span>&#123;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">break</span>;<br>        temp = temp.next;<br>    &#125;<br>    newWatermelon.pre = temp;<br>    temp.next = newWatermelon;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>在中间空位置插入瓜</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addByOrder</span><span class="hljs-params">(Watermelon newWatermelon)</span>&#123;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">ifExist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp.location == newWatermelon.location)<span class="hljs-comment">//这个位置已经有瓜占了</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (temp.location &gt; newWatermelon.location)&#123;<span class="hljs-comment">//找到了合适位置的后一个</span><br>            ifExist = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ifExist)&#123;<br>        newWatermelon.pre = temp.pre;<br>        temp.pre.next = newWatermelon;<br>        temp.pre = newWatermelon;<br>        newWatermelon.next = temp;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;这个位置已经有瓜啦&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>一眼看出是个不懂瓜的人或者懂瓜的人，随机应变改变显眼位置的瓜</p><p><img src="https://img.gejiba.com/images/7ddc434aa7b800e22e869c4f28d10ddc.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exchange</span> <span class="hljs-params">(Watermelon newWatermelon)</span>&#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;今天的瓜已经卖完了&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">ifExist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//标记一下，该位置有没有瓜，有瓜再换，没瓜也不用换</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (temp.location == newWatermelon.location)&#123;<br>            ifExist = <span class="hljs-literal">true</span>;<span class="hljs-comment">//该位置存在瓜</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ifExist)&#123;<br>        temp.pre.next = newWatermelon;<br>        temp.next.pre = newWatermelon;<br>        newWatermelon.pre = temp.pre;<br>        newWatermelon.next = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;该位置本来就没有瓜，不用换&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>对面的人凶神恶煞还拿着刀，可以拿走不熟的生瓜蛋子，防止被捅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">takeAway</span><span class="hljs-params">(<span class="hljs-type">int</span> location)</span>&#123;<br>    <span class="hljs-keyword">if</span> (head.next == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;今天的瓜已经卖完了&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">ifExist</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//标记一下，假如该位置没有瓜，本来就不用拿走</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp.next == <span class="hljs-literal">null</span>)<span class="hljs-comment">//没找到位置</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">if</span> (temp.location == location)&#123;<br>            ifExist = <span class="hljs-literal">true</span>;<span class="hljs-comment">//该位置存在瓜</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        temp = temp.next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (ifExist)&#123;<br>        temp.pre.next = temp.next;<br>        temp.next.pre = temp.pre;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;该位置本来就没有瓜，不用拿走&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>查看瓜摊情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;今天的瓜已经卖完了&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">Watermelon</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> head.next;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-keyword">if</span> (temp == <span class="hljs-literal">null</span>)<br>            <span class="hljs-keyword">break</span>;<br>        System.out.println(temp);<br>        temp = temp.next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="写个主类"><a href="#写个主类" class="headerlink" title="写个主类"></a>写个主类</h3><p>好，现在瓜摊的几个功能写完了，只需要随便写个主类，加几个功能就可以啦~</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleLinkedList</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;摆一个地摊&quot;</span>);<br>        <span class="hljs-type">Stall</span> <span class="hljs-variable">stall</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stall</span>();<br>        System.out.println(<span class="hljs-string">&quot;放几个西瓜，趁人不注意，塞俩生瓜蛋子&quot;</span>);<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;生瓜蛋子&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">7</span>,<span class="hljs-string">&quot;生瓜蛋子&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(<span class="hljs-number">10</span>,<span class="hljs-string">&quot;熟瓜&quot;</span>));<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">function</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">stop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        System.out.println(<span class="hljs-string">&quot;0：收摊\n&quot;</span> +<br>                <span class="hljs-string">&quot;1：末尾摆一个瓜\n&quot;</span> +<br>                <span class="hljs-string">&quot;2：中间位置插入一个瓜\n&quot;</span> +<br>                <span class="hljs-string">&quot;3：来了个新手，换上一个生瓜蛋子\n&quot;</span> +<br>                <span class="hljs-string">&quot;4：来了个找茬儿的，拿走一个生瓜蛋子\n&quot;</span> +<br>                <span class="hljs-string">&quot;5：查看瓜摊情况&quot;</span>);<br>        <span class="hljs-keyword">while</span>(stop)&#123;<br>            <span class="hljs-keyword">switch</span>(function.nextInt())&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    stop = <span class="hljs-literal">false</span>;<br>                    System.out.println(<span class="hljs-string">&quot;收摊走人~&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入瓜的位置和成熟程度&quot;</span>);<br>                    stall.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(scanner.nextInt(),scanner.next()));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入瓜的位置和成熟程度&quot;</span>);<br>                    stall.addByOrder(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(scanner.nextInt(),scanner.next()));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入瓜的位置和成熟程度&quot;</span>);<br>                    stall.exchange(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Watermelon</span>(scanner.nextInt(),scanner.next()));<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                    System.out.println(<span class="hljs-string">&quot;输入瓜的位置和成熟程度&quot;</span>);<br>                    stall.takeAway(scanner.nextInt());<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                    stall.show();<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><blockquote><p>读者看完可以自行编写实现功能或者在公众号获取完整源码，尝试做一天瓜摊老板吧~<br><br>微信公众号“一只达瓦里氏”后台回复0816获取完整源码</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>性别矛盾</title>
    <link href="/2023/06/21/%E6%80%A7%E5%88%AB%E7%9F%9B%E7%9B%BE/"/>
    <url>/2023/06/21/%E6%80%A7%E5%88%AB%E7%9F%9B%E7%9B%BE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.gejiba.com/images/65f8a7ddb18567c926af3c93c3da34a1.png"><br><img src="https://img.gejiba.com/images/4cd09c067cce6180701ad5d86484e669.png"><br><img src="https://img.gejiba.com/images/3f745f8f53696758da445d732e299888.png"><br>综合思维导图如下, 可以尝试右键保存图片本地观看<br><img src="https://img.gejiba.com/images/3c37c7b9a285747a1ad33bb8759f6159.png" alt="综合思维导图"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一个工人读史的困惑</title>
    <link href="/2023/06/21/%E4%B8%80%E4%B8%AA%E5%B7%A5%E4%BA%BA%E8%AF%BB%E5%8F%B2%E7%9A%84%E5%9B%B0%E6%83%91/"/>
    <url>/2023/06/21/%E4%B8%80%E4%B8%AA%E5%B7%A5%E4%BA%BA%E8%AF%BB%E5%8F%B2%E7%9A%84%E5%9B%B0%E6%83%91/</url>
    
    <content type="html"><![CDATA[<p>《一个工人读史的困惑》<br>(贝托尔特·布莱希特。翻译版本较多，这里只选取一种)</p><blockquote><p>  那七个城门的底比斯是谁建造的？<br>    书本上列了一些国王的名字。<br><br>    石头和砖块是国王搬的吗？<br><br>    还有巴比伦，一再被摧毁<br><br>    是谁又一再将她重建？<br><br>    金光闪闪的利马的建筑工人，<br><br>    他们住的房子在什么地方？<br><br>    砌了一天的城墙，<br><br>    天黑之后，<br><br>    万里长城的泥水匠在哪里过夜？<br><br>    雄伟的罗马到处都有凯旋门。<br><br>    那是谁打造的？<br><br>    那些罗马皇帝战胜的又是谁？<br><br>    大名鼎鼎的拜占庭<br><br>    它的居民都住在宫殿吗？<br><br>    传说中的亚特兰提斯，<br><br>    大海先淹没奴隶，<br><br>    然后那些主子才漂浮在黑夜的汪洋中哀嚎。<br><br>    年轻的亚历山大征服了印度。<br><br>    就凭他一人吗？<br><br>    西泽打败了高卢人，<br><br>    他该不会连个煮饭的都没带吧？<br><br>    无敌舰队沉没的时候，<br><br>    西班牙的腓力哭了。<br><br>    没有别的人哭吗？<br><br>    腓特烈大帝在七年战争中获胜。<br><br>    除了他还有谁获胜？<br><br>    页页有胜利。<br><br>    谁来准备庆功宴？<br><br>    代代出伟人。<br><br>    谁来买单？<br><br>    一大堆史实。<br><br>    一大堆疑问。<br></p></blockquote><hr><blockquote><p>  《防暑降温措施管理办法》安监总安健[2012]89号第八条<br><br>    在高温天气期间，用人单位应当按照下列规定，根据生产特点和具体条件，采取合理安排工作时间、轮换作业、适当增加高温工作环境下劳动者的休息时间和减轻劳动强度、减少高温时段室外作业等措施：<br><br>    （一）用人单位应当根据地市级以上气象主管部门所属气象台当日发布的预报气温，调整作业时间，但因人身财产安全和公众利益需要紧急处理的除外：<br><br>    1、日最高气温达到40℃以上，应当停止当日室外露天作业；<br><br>    2、日最高气温达到37℃以上、40℃以下时，用人单位全天安排劳动者室外露天作业时间累计不得超过6小时，连续作业时间不得超过国家规定，且在气温最高时段3小时内不得安排室外露天作业<br><br>    3、日最高气温达到35℃以上、37℃以下时，用人单位应当采取换班轮休等方式，缩短劳动者连续作业时间，并且不得安排室外露天作业劳动者加班。<br><br>    （二）在高温天气来临之前，用人单位应当对高温天气作业的劳动者进行健康检查，对患有心、肺、脑血管性疾病、肺结核、中枢神经系统疾病及其他身体状况不适合高温作业环境的劳动者，应当调整作业岗位。职业健康检查费用由用人单位承担。<br><br>    （三）用人单位不得安排怀孕女职工和未成年工在35℃以上的高温天气期间从事室外露天作业及温度在33℃以上的工作场所作业。<br><br>    （四）因高温天气停止工作、缩短工作时间的，用人单位不得扣除或降低劳动者工资。<br><br>    用人单位安排劳动者在35℃以上高温天气从事室外露天作业以及不能采取有效措施将工作场所温度降低到33℃以下的，应当向劳动者发放高温津贴，并纳入工资总额。<br></p></blockquote><hr><blockquote><p>农兵工这么辛苦，想必都在城市有一套房子吧</p></blockquote><iframe src="//player.bilibili.com/player.html?aid=634733432&bvid=BV16b4y1i7mi&cid=460501584&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="650" height="500"> </iframe>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL忘密码了怎么办</title>
    <link href="/2023/06/21/MySQL%E5%BF%98%E5%AF%86%E7%A0%81%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <url>/2023/06/21/MySQL%E5%BF%98%E5%AF%86%E7%A0%81%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    
    <content type="html"><![CDATA[<p><a href="http://t.csdn.cn/mFZZj">教程原文</a></p><ol><li><p>管理员模式打开cmd，如果还开着mysql服务那先关掉<code>net stop mysql</code><br>用如下命令打开越权模式<br><code>mysqld --console --skip-grant-tables --shared-memory</code><br>这样可以越权模式打开mysql，保留这个黑窗口<br><img src="https://img.gejiba.com/images/3267fbb2193cabd2d0f97388665052c5.png"></p></li><li><p>用管理员身份打开一个cmd<br><code>mysql -u root -p</code><br>让输入密码时无需输入直接回车就可以进入root用户<br>（上一步没有关闭mysql服务这一步就会失败）</p></li><li><p>刷新权限，不然不允许改密码<br><code>flush privileges;</code></p></li><li><p>改密码为123<br><code>alter user &#39;root&#39;@&#39;localhost&#39; identified by &#39;123&#39;;</code></p></li><li><p>再刷新一下权限就可以了<br><code>flush privileges;</code></p></li></ol><p><img src="https://img.gejiba.com/images/d30c87e2c9bb2d6ca0eb22fb855ad4df.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>KMP详解</title>
    <link href="/2023/06/12/KMP/"/>
    <url>/2023/06/12/KMP/</url>
    
    <content type="html"><![CDATA[<p><a href="https://img.gejiba.com/image/EegrG8"><img src="https://img.gejiba.com/images/40bc3cb7697a13d587b80e33feb3dcc9.png" alt="40bc3cb7697a13d587b80e33feb3dcc9.png"></a></p><blockquote><p>KMP的本质是通过已经掌握的而信息来规避重复的运算</p></blockquote><blockquote><p>只需要一次主串的遍历就可以完成匹配，next数组的存在让j的回溯不需要循环，而是提前准备好表备查，这样没有循环的嵌套，复杂度仅为O(n)</p></blockquote><table><thead><tr><th align="center">pattern</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">c</th></tr></thead><tbody><tr><td align="center">j</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td></tr><tr><td align="center">next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td></tr></tbody></table><p>可以看出来，next数组存的是如果该位置匹配失败那么该跳到哪里，j&#x3D;4如果匹配失败了，那么此时前后缀长度为1，应该回溯到j&#x3D;1。这样的话，我们构建next数组的时候只需要把当前位置产生的前后缀信息放到下一个位置便可以了，也就是说，最后一个位置的前后缀信息是不用比较的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(String target, String pattern)</span>&#123;<br>    <span class="hljs-keyword">return</span> indexOf(target, pattern, <span class="hljs-number">0</span>);<span class="hljs-comment">//下一个写的是从固定位置开始比较，不写位置的话默认从0位置开始比较</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">indexOf</span><span class="hljs-params">(String target, String pattern, <span class="hljs-type">int</span> begin)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> target.length(), m = pattern.length();<br>    <span class="hljs-keyword">if</span>(begin&lt;<span class="hljs-number">0</span>)<br>        begin = <span class="hljs-number">0</span>;<span class="hljs-comment">//begin容错</span><br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span> || n&lt;m || begin&gt;=n)<span class="hljs-comment">//目标串长度为0，目标串小与模式串，开始比较的位置bigin就已经越界，均不符合要求</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    next = getNext(pattern);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> begin,j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i&lt;n &amp;&amp; j&lt;m)&#123;<br>        <span class="hljs-comment">//循环条件：i比到n，j比到m</span><br>        <span class="hljs-keyword">if</span>(j==-<span class="hljs-number">1</span> || target.charAt(i)==pattern.charAt(j))&#123;<br>            <span class="hljs-comment">//比对成功可以让指针加1</span><br>            <span class="hljs-comment">//也可能j是被回溯，然后再来比较，并且有可能直接被回溯为-1，如果回溯为-1，说明没有可以利用的子串信息，直接比下一对就行，所以也需要两指针+1</span><br>            <span class="hljs-comment">//回溯到-1和0是不一样的，0还需要比较一下i和j=0两位置的字符，失败的那个位置没有可以用的子串信息，只能和第0号字符比较了，但是如果回溯到了-1，说明，第0号元素也不用比较了，这一次的匹配失败已经证明了和第0个肯定不相同，直接回溯到-1，就能在下一次循环中让两个指针+1，不用浪费一次比较</span><br>            i++;<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            j = next[j];<span class="hljs-comment">//匹配字符失败，j回溯</span><br>            <span class="hljs-keyword">if</span>(n-i+<span class="hljs-number">1</span>&lt;m-j+<span class="hljs-number">1</span>)<span class="hljs-comment">//如果目标串长度还没子串长，那就不用比了</span><br>                <span class="hljs-keyword">break</span>;<br>            <br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> j==m?i-m:-<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>构建next</p><blockquote><ol><li>k前缀长度一定是依次增加，不能跳</li><li>pattern[k] !&#x3D; pattern[j]的时候前缀需要缩短，怎么缩短？k回溯一次</li><li>课本的这个版本next数组情况稍有不同，j位置的next值存的是以j-1为尾的后缀的长度，所以前缀指针匹配失败的时候，直接找next[k]就能找到k-1位置字符上一次出现的位置，回溯略微方便一点</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getNext(String pattern)&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, k = -<span class="hljs-number">1</span>;<span class="hljs-comment">//双指针，同时k也表示当前的前后缀长度</span><br>    <span class="hljs-type">int</span> next[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[pattern.length()];<br>    next[<span class="hljs-number">0</span>] = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(j&lt;pattern.length()-<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//构建的时候上一个位置的前后缀长度写在下一个位置的next上，所以只需要比较到倒数第二个，最后一个next也能写上</span><br>    <span class="hljs-keyword">if</span>(k==-<span class="hljs-number">1</span> || pattern.chatAt(j)==pattern.charAt(k))&#123;<span class="hljs-comment">//k==-1表示是第一个，先加一下，如果两个指针的位置匹配成功也可以加一下</span><br>        j++;<br>        k++;<span class="hljs-comment">//匹配成功那么前后缀长度加1</span><br>        next[j] = k;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//没有匹配成功，那么需要找上一个和k-1位置相同的字符，不对一下能不能和j位置匹配成功，那么上一个和k-1字符相同的在哪呢？在next[k]</span><br>        k = next[k];<br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改进next数组<br>通过例子来看为什么需要改进</p><table><thead><tr><th align="center">target</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">b</th><th align="center">a</th><th align="center">b</th><th align="center">c</th></tr></thead><tbody><tr><td align="center">pattern</td><td align="center">a</td><td align="center">b</td><td align="center">c</td><td align="center">a</td><td align="center">b</td><td align="center">c</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p>那么从上述例子来看的话，由于target串中的b对比失败，需要将指针j回溯到j&#x3D;2，但是很明显如果j&#x3D;5没有匹配上的话，j&#x3D;2也匹配不上，因为j&#x3D;5和j&#x3D;2两个位置的字符一样！</p><p>所以，next数组还能进行改进，使得时间复杂度进一步下降</p><table><thead><tr><th align="center">pattern</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">c</th></tr></thead><tbody><tr><td align="center">前后缀长度k(第一版next)</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td></tr><tr><td align="center">改进后的next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td></tr></tbody></table><blockquote><p>这里的-1怎么理解？<br>回溯到-1和0是不一样的，0还需要比较一下i和j&#x3D;0两位置的字符，失败的那个位置没有可以用的子串信息，只能和第0号字符比较了，但是如果回溯到了-1，说明，第0号元素也不用比较了，这一次的匹配失败已经证明了和第0个肯定不相同，直接回溯到-1，就能在下一次循环中让两个指针+1，不用浪费一次比较</p></blockquote><p>总结一下怎么个改进思想：回溯j的时候，我们回溯到的位置是可利用子串的后一个位置，但是如果这个位置和匹配失败的位置的字符一样的话，那其实一定匹配不上，可以利用旧next表回溯的位置的next值接着缩短前后缀，因为那个位置的next值是匹配不上的时候用的，如果我们提前知道匹配不上那其实也就可以提前用这个信息，一直循环缩短到和j位置不一样为止，这样和j位置不一样的话起码还有得比，不然回溯位置一样的话根本不用比</p><p>一句话，<strong>回溯一定要回溯到不一样的字符</strong>，要是回溯位置和原来一样，那一定匹配失败，还得回溯，不如我们在next数组里就把这一步工作做了，减少indexOf()函数里while的工作量</p><p><strong>改进就是避免跳转之后相同</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] getNext(String pattern)&#123;<br>    <span class="hljs-type">int</span> j=<span class="hljs-number">0</span>, k=-<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span>[] next = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>(pattern.lenght());<br>    <span class="hljs-keyword">while</span>(j&lt;pattern.length-<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(k==-<span class="hljs-number">1</span> || pattern.charAt(j)==pattern.chatAt(k))&#123;<br>            j++;<br>            k++;<br>            <span class="hljs-keyword">if</span>(pattern.chatAt(j==pattern.charAt(k)))<br>                next[j] = next[k];<span class="hljs-comment">//用k处的next值复制给j处(缩短前缀)</span><br>                <span class="hljs-comment">//这里有个问题，那要改进版的next需要连续缩短两次或者更多呢呢？</span><br>            <span class="hljs-keyword">else</span><br>                next[j] = k;<span class="hljs-comment">//一直到不相等的时候才能用指针赋值</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            k = next[k];<span class="hljs-comment">//前缀缩短</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果改进版的next需要连续缩短前缀两次或者更多呢呢？<br>如果需要连续缩短，那么中间那个位置的它当年也是想这么想的，所以它存的就是匹配失败时需要跳转的位置，见下方例子</p></blockquote><table><thead><tr><th align="center">pattern</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">d</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">a</th><th align="center">a</th></tr></thead><tbody><tr><td align="center">索引</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td align="center">10</td><td align="center">11</td><td align="center">12</td><td align="center">13</td></tr><tr><td align="center">第一代next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">0</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">4</td><td align="center">5</td><td align="center">3</td><td align="center">4</td></tr><tr><td align="center">改进版next</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">2</td><td align="center">-1</td><td align="center">0</td><td align="center">0</td><td align="center">-1</td><td align="center">0</td><td align="center">5</td><td align="center">-1</td><td align="center">4</td></tr></tbody></table><blockquote><p>这个例子中，计算改进版next时，9号元素a如果匹配失败需要返回3，但是3号元素也是a，所以此时需要k &#x3D; next[k]，next[k]是-1而不是0，所以连续缩短前缀并不需要循环，一次就能到位</p></blockquote><p>可以看到改进版的next数组各个数字并不连续</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/12/hello-world/"/>
    <url>/2023/06/12/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
